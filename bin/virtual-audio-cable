#! /usr/bin/python3
#
# Create a virtual audio cable to connect the output of OBS
# to the microphone input of Zoom.
#

import sys, os, re
from subprocess import run, PIPE
from time import sleep

def get_obj_id(name):
	output = run(["pw-cli", "ls", name], stdout=PIPE, check=True).stdout
	m = re.match(r"\s+id (\d+)", output.decode("UTF-8"))
	if m:
		return int(m.group(1))	
	else:
		return None

def destroy_obj(id):
	run(["pw-cli", "destroy", str(id)], check=True)

def list_ports(direction):
	output = run(["pw-link",
		"-" + direction,
		], stdout=PIPE, check=True).stdout
	return output.decode("UTF-8").split("\n")

def create_null_sink(name, media_class):
	run(["pactl",
		"load-module", "module-null-sink",
		"media.class=" + media_class,
		"sink_name=" + name,
		"sink_properties=device.description=" + name,
		"channel_map=mono",
		], stdout=PIPE, check=True)

def create_link(node1, node2):
	run(["pw-link", node1, node2], check=True)

def create_cable():
	# A virtual sink that can be set as a monitor in OBS
	if "To-Zoom:playback_MONO" in list_ports("i"):
		print("To-Zoom already exists.")
	else:
		print("Creating To-Zoom...")
		create_null_sink("To-Zoom", "Audio/Sink")
	
	# A virtual source that is selectable as a microphone in Zoom
	if "From-OBS:capture_MONO" in list_ports("o"):
		print("From-OBS already exists.")
	else:
		print("Creating From-OBS...")
		create_null_sink("From-OBS", "Audio/Source/Virtual")
	
	# Give them a chance to settle
	sleep(.1)
	
	# Connect them
	create_link("To-Zoom:monitor_MONO", "From-OBS:input_MONO")

def destroy_cable():
	for name in ("From-OBS", "To-Zoom"):
		id = get_obj_id(name)
		if id is not None:
			destroy_obj(id)

def connect_peripherals():
	# Load the Flask configuration file
	config = types.ModuleType("config")
	config.__file__ = os.path.join(os.path.dirname(__file__), "..", "instance", "config.py")
	with open(config.__file__, mode="rb") as config_file:
		exec(compile(config_file.read(), config.__file__, "exec"), config.__dict__)
	
	# Connect the microphone specified in config.py to the input of the virtual
	# audio cable which connects the output of OBS to the micriphone input of Zoom.
	if "microphone" in config.ZOOM:
		print("Connecting microphone %s..." % config.ZOOM["microphone"])
		subprocess.run(["pw-link", config.ZOOM["microphone"], "From-OBS:input_MONO"])
	
	# Connect each set of speakers specified in config.py to the output of the
	# same virtual audio cable. This allows those physically present to hear
	# what OBS is sending to Zoom.
	for speaker in config.ZOOM["speakers"]:
		print("Connecting speaker %s..." % speaker)
		subprocess.run(["pw-link", "To-Zoom:monitor_MONO", speaker])

good = 0
for arg in sys.argv[1:]:
	match sys.argv[1]:
		case "create":
			create_cable()
			good += 1
		case "destroy":
			destroy_cable()
			good += 1
		case "connect-peripherals":
			connect_peripherals(config.ZOOM)
			good += 1
		case _:
			good = False
			break
if not good:
	sys.stderr.write("Usage: virtual-audio-cable [create, destroy, connect-peripherals]\n")
	sys.exit(1)

