#! /usr/bin/python3
"""
This script starts an HTTP server for Pub-Tools and then
creates a browser widget which connects to it.

Requires PyWebview:
  $ sudo apt install pywebview
Required for --gui-toolkit qt:
  $ sudo apt install python3-qtpy
"""

from venv_tool import activate
activate(dist_packages=True)

from argparse import ArgumentParser, RawDescriptionHelpFormatter
import webview
from threading import Thread
from werkzeug.serving import make_server
import logging

from app import create_app

parser = ArgumentParser(
	description = __doc__,
	formatter_class = RawDescriptionHelpFormatter,
	)
parser.add_argument("--subapp", default=None, help="Choose the top-level directory")
parser.add_argument("--no-server", action="store_true", help="Don't run own instance of the Pub Tools server")
parser.add_argument("--gui-toolkit", default="gtk", help="Select gtk or qt")
parser.add_argument("--debug", action="store_true", help="Enabling devtools, verbose logging")
options = parser.parse_args()

logging.basicConfig(
	level = logging.DEBUG if options.debug else logging.INFO,
	format = '%(asctime)s %(levelname)s %(name)s %(message)s',
	datefmt = '%H:%M:%S'
	)

if not options.no_server:
	logging.info("Starting embedded web server...")
	server = make_server("127.0.0.1", port=5000, app=create_app(), threaded=True)
	server_thread = Thread(target=lambda: server.serve_forever())
	server_thread.daemon = True
	server_thread.start()

logging.info("Starting webview...")
webview.create_window(
	title = "Pub-Tools",
	url = "http://localhost:5000/" + ((options.subapp + "/") if options.subapp else ""),
	width = 1200,
	height = 900,
	)
webview.start(
	debug = options.debug,
	# qt: small unless we set QT_SCALE_FACTOR=2, no button padding
	# gtk: patchbay does not work
	gui = options.gui_toolkit,
	)
logging.info("Webview has exited.")

if not options.no_server:
	logging.info("Shutting down the web server...")
	server.shutdown()
	server_thread.join()
	logging.info("Server has stopt.")
